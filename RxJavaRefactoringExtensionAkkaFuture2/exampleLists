public class ProcessOrderActor extends UntypedActor {

	final Timeout t = new Timeout(Duration.create(5, TimeUnit.SECONDS));
	ActorRef orderActor = getContext().actorOf(new Props(OrderActor.class));
	ActorRef addressActor = getContext().actorOf(new Props(AddressActor.class));
	ActorRef orderAggregateActor = getContext().actorOf(
			new Props(OrderAggregateActor.class));

	@Override
	public void onReceive(Object message) throws Exception {

		if (message instanceof Integer) {
			Integer userId = (Integer) message;
			final ArrayList<Observable<Object>> futures = new ArrayList<Observable<Object>>();
			Subject<java.lang.Object, java.lang.Object> observable1 = ReplaySubject.create();
			Observable.fromCallable(new Callable<java.lang.Object>() {
				@Override
				public java.lang.Object call() throws Exception {
					return Await.result(ask(orderActor, userId, t), Duration.Inf());
				}
			}).subscribeOn(Schedulers.io()).subscribe(observable1);
			// make concurrent calls to actors
			futures.add(observable1);
			Subject<java.lang.Object, java.lang.Object> observable = ReplaySubject.create();
			Observable.fromCallable(new Callable<java.lang.Object>() {
				@Override
				public java.lang.Object call() throws Exception {
					return Await.result(ask(addressActor, userId, t), Duration.Inf());
				}
			}).subscribeOn(Schedulers.io()).subscribe(observable);
			futures.add(observable);

			// set the sequence in which the reply are expected
			final Observable<Iterable<Object>> aggregate = Observable.zip(futures, (objects) -> Arrays.stream(objects).map((o) -> (java.lang.Object) o)
					.collect(Collectors.toList()));

			// once the replies comes back, we loop through the Iterable to
			// get the replies in same order
			// final Future<OrderHistory> aggResult =

			final Future<OrderHistory> aggResult = aggregate.map(
					new Mapper<Iterable<Object>, OrderHistory>() {
						public OrderHistory apply(Iterable<Object> coll) {
							final Iterator<Object> it = coll.iterator();
							final Order order = (Order) it.next();
							final Address address = (Address) it.next();
							return new OrderHistory(order, address);
						}
					}, getContext().system().dispatcher());
			// aggregated result is piped to another actor
			pipe(aggResult, getContext().system().dispatcher()).to(
					orderAggregateActor);
		}
	}
	
	
	/*
	@Override
	public void onReceive(Object message) throws Exception {

		if (message instanceof Integer) {
			Integer userId = (Integer) message;
			final ArrayList<Observable<Object>> futures = new ArrayList<Observable<Object>>();
			// make concurrent calls to actors
			Subject<Object, Object> f1 = ReplaySubject.create(); 
			Observable.fromCallable(() -> Await.result(ask(orderActor, userId, t), Duration.Inf()))
			.subscribeOn(Schedulers.io())
			.subscribe(f1);
			futures.add(f1);
			
			//Same for here
			//futures.add(ask(addressActor, userId, t));

			// set the sequence in which the reply are expected
			final Observable<Iterable<Object>> aggregate = Observable.zip(futures, new FuncN<Iterable<Object>>() {
				public <Iterable<Object>> call(Object... objects) {
					List<Object> internalList = new ArrayList<>(objects.length);
					for (Object o : objects) {
						internalList.add((Object) o);
					}
					return internalList;
				}
			});


			final Observable<OrderHistory> aggResult = aggregate.map(new Func1<Iterable<Object>, OrderHistory>() {
				@Override
				public OrderHistory call(Iterable<Object> coll) {
					final Iterator<Object> it = coll.iterator();
					final Order order = (Order) it.next();
					final Address address = (Address) it.next();
					return new OrderHistory(order, address);
				}				
			});
		
			
			pipe(Futures.future(new Callable<OrderHistory>() {
				@Override
				public OrderHistory call() throws Exception {					
					return aggResult.toBlocking().single();
				}
				
			}, ExecutionContexts.global()), getContext().system().dispatcher()).to(
					orderAggregateActor);
		}
	}
	*/
}